public class FinalAssignmentSolution {

public class MiscUtils implements IMiscUtils{
	int sum = 0;
	boolean left = true,right = true;

	@Override
	public BinaryTreeNode insert(BinaryTreeNode root, int element) {
		BinaryTreeNode node = new BinaryTreeNode(element);
		if(root==null) {
			return node;
		}else {
			if(element > (int)root.element) { 
				root.right = insert(root.right,element);
			}else if(element < (int)root.element) {
				root.left = insert(root.left,element);
			}
		}
		return root;
	}

	@Override
	public int sumRange(BinaryTreeNode root, int low, int high) {
		if(root == null) {
			return 0;
		}else {
			if( (int) root.element >= low && (int) root.element <= high ) {
				sum = sum + (int) root.element;
				sumRange(root.left,low,high);
				sumRange(root.right,low,high);
			}
		}
		return sum;
	}

	@Override
	public boolean isValidBST(BinaryTreeNode root) {
		if (root == null) {
			return true;
		}else {

			if(root.left != null && (int)root.left.element >= (int)root.element ) {
				left = false;
			}
			if(root.right != null && (int)root.right.element <= (int)root.element ) {
				right = false;
			}
			if(!isValidBST(root.right)) {
				return false;
			}
			if(!isValidBST(root.left)) {
				return false;
			}
			return (left && right) ;
		}
	}

	@Override
	public int[] nextSmallerNumber(int[] array) {
		Stack s = new Stack();
		int[] result = new int[array.length];
		for(int i =0 ;i< array.length;i++) {
			s.push(array[array.length-i-1]);
		}
		int i =1,j=1,x=0;
		while(!s.isEmpty()) {
			if(j == i) {
				x = (int) s.pop();
			}
			if(j<array.length && array[j] < x) {
				result[i-1] = j;
				j = ++i;
			}else if(j >= array.length){
				result[i-1] = -1;
				j = ++i;
			}else {
				j++;
			}
		}
		return result;
	}

}


public class hashDictionary<K, V> implements IDictionary<K, V>{	
	int size;
	Node[] hash;
	int s=0;
	
	public hashDictionary(int s) {
		size = s;
		hash = new Node[size];
		for(int i=0;i<size;i++) {
			hash[i] = new Node<K, V>();
			hash[i] = null;
		}
	}
	@Override
	public V get(K key) {
		if(key == null) {
			throw new NullPointerException("You didn't Enter any key");
		}
		int k = Math.abs(key.hashCode());
		
		Node node = new Node();
		node = hash[k%size];
		
		while(node != null ) {
			if(key == node.getkey()) {
				return  (V) node.getvalue();
			}
			node = node.next;
		}
		return null;
	}

	@Override
	public V set(K key, V value) {
		if(key== null || value == null) {
			throw new NullPointerException("you didn't enter value or key");
		}
		if(get(key)==null ) {
			//Assign new node with the given key and value.
			Node<K, V> n = new Node<K, V>();
			n.set(key, value);
			
			//Calculate the index of Hash table array "Chaining".
			int k = Math.abs(key.hashCode());
			Node node = new Node();
			node = hash[k%size];
			if(node ==null) {
				node = n;
				hash[k%size] = node;
				s++;
				return null;
			}else {
				while(node.next != null) {
					node= node.next;
				}
				node.next = n;
				s++;
				return null;
			}
		}else {
			V val = remove(key);
			set(key,value);
			return val;
		}
	}

	@Override
	public V remove(K key) {
		if(key == null) {
			throw new NullPointerException("You didn't Enter any key");
		}
		int k = Math.abs(key.hashCode());
		Node node = new Node();
		node = hash[k%size];
		if(key == node.getkey()) {
			V val = (V) node.getvalue();
			hash[k%size] = hash[k%size].next;
			s--;
			return  val;
		}else {
			while(node.next != null ) {
				node = node.next;
				if(key == node.getkey()) {
					V val = (V) node.getvalue();
					Node n1 = null;
					n1= node;
					node=n1.next;
					n1=null;
					s--;
					return  val;
				}
			}
			return null;
		}
	}

	@Override
	public boolean isEmpty() {
		if(s==0) {
			return true;
		}else {
			return false;
		}
	}



}


public class treeDictionary<K,V> implements IDictionary<K,V> {
	int size=0;
	
	private class bstNode {
		K key;
		V value;
		bstNode left,right;
	}
	bstNode root;
	
	@Override
	public V get(K key) {
		if(key == null) {
			throw new NullPointerException("You didn't Enter any key");
		}
		bstNode x = root;
		while (x != null)
		{
			int cmp = ((String)key).compareTo((String)x.key);
			if (cmp < 0) {
				x = x.left;
			}
			else if (cmp > 0) {
				x = x.right;
			}
			else if (cmp == 0) {
				return x.value;
			}
		}
		return null;
	}

	@Override
	public V set(K key, V value) {
		if(key== null || value == null) {
			throw new NullPointerException("you didn't enter value or key");
		}
		if(val == null) {
			size++;
		}
		root = set(root, key, value); 
		
		
		return val;

	}
	V val = null;
	private bstNode set(bstNode x, K key, V value) {
		if(get(key) == null) {
			if (x == null) {
				bstNode n = new bstNode();
				n.key = key;
				n.value = value;
				return n;
			}
			int cmp = ((String)key).compareTo((String)x.key);
			if (cmp < 0) {
				x.left = set(x.left, key, value);
			}
			else if (cmp > 0) {
				x.right = set(x.right, key, value);
			}
			else if (cmp == 0) {
				x.value = value;
			}
			return x;
		}else {
			val = remove(key);
			set(x,key,value);
			return x ;
		}

	}

	@Override
	public V remove(K key) {
		root = delete(root, key); 
		return null;
	}
	
	private bstNode deleteMin(bstNode x){
	if (x.left == null) {
		return x.right;
	}
	x.left = deleteMin(x.left);
	return x;
	}
	
	private bstNode delete(bstNode x, K key) {
		if (x == null) return null;
		int cmp = ((String)key).compareTo((String)x.key);
		if(cmp < 0) {
			x.left = delete(x.left, key);
		}
		else if(cmp > 0) {
			x.right = delete(x.right, key);
		}
		else {
			if (x.right == null) {
				return x.left;
			}
			if (x.left   == null) {
				return x.right;
			}
			bstNode t = x;
			x = min(t.right);
			x.right = deleteMin(t.right);
			x.left = t.left;
		}
		return x;
		}


	private bstNode min(bstNode right) {
		while(right !=null) {
			right = right.left;
		}
		return right;
	}

	@Override
	public boolean isEmpty() {
		if(size == 0) {
			return true;
		}else {
			return false;
		}
	}

}

public class Stack {
	
	private class Node{
		Node link;
		Object data;
	}
	int size=0;
	Node top;
	
	
	public Object pop() {
		if(size==0) {
			return null;
		}else {
		    Object n = top.data;
		    top = top.link;
		    size--;
			return n;}
	}

	
	public Object peek() {
		if(size==0) {
			return null;
		}else {
			Object n = top.data;
			return n;}
	}

	
	public void push(Object element) {		
		Node n = new Node();
		n.data = element;
		n.link = top;
		top = n;
		size++;
	}

	
	public boolean isEmpty() {
		if(size==0) {
			return true;
		}else {
			return false;}
	}

	
	public int size() {
		int x=0;
		if(size==0) {
			return 0;
		}
		Node n = top;
		while (n.link != null) {
			n = n.link;
			x++;
		}
		return ++x;
	}
	
	public void show() {
		Node n=top;
		for(int i=0;i<size;i++) {
			System.out.println(n.data);
			n=n.link;
		}
	}

}
/*for Qustion 2 hash implementation */
public class Node<K,V> {
	K key;
	V value;
	Node next=null;
	
	public void set (K k, V v){
		key = k;
		value = v;
		next = null;
	}

	public K getkey() {
		return key;
	}
	public V getvalue() {
		return value;
	}
}


}
